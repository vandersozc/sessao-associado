package br.com.vcampanholi.api.v1.pauta;import br.com.vcampanholi.api.v1.pauta.facade.PautaFacade;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.stubs.PautaRequestStub;import br.com.vcampanholi.stubs.PautaResponseStub;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.test.context.junit.jupiter.SpringExtension;import org.springframework.test.web.servlet.MockMvc;import static br.com.vcampanholi.api.config.ObjectMapperConverter.convertToString;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@ExtendWith(SpringExtension.class)@WebMvcTest(PautaController.class)class PautaControllerTest {    @Autowired    private MockMvc mockMvc;    @MockBean    private PautaFacade pautaFacade;    @Test    void deveCriarUmaPauta() throws Exception {        when(pautaFacade.criarPauta(any())).thenReturn(PautaResponseStub.pautaResponse());        var pautaResponse = PautaResponseStub.pautaResponse();        this.mockMvc.perform(post("/sessao-associado/v1/pauta")                .contentType(MediaType.APPLICATION_JSON)                .content(convertToString(PautaRequestStub.pautaRequest()))                .accept(MediaType.APPLICATION_JSON))                .andExpect(status().isOk())                .andExpect(jsonPath("$.id").value(pautaResponse.getPautaId()))                .andExpect(jsonPath("$.assunto").value(pautaResponse.getAssunto()))                .andExpect(jsonPath("$.dataCadastro").value(pautaResponse.getDataCadastro().toString()));    }    @Test    void deveRetornarUmaPautaAoBuscar() throws Exception {        when(pautaFacade.buscarPauta(any())).thenReturn(PautaResponseStub.pautaResponse());        var pautaResponse = PautaResponseStub.pautaResponse();        this.mockMvc.perform(get("/sessao-associado/v1/pauta/1"))                .andExpect(status().isOk())                .andExpect(jsonPath("$.id").value(pautaResponse.getPautaId()))                .andExpect(jsonPath("$.assunto").value(pautaResponse.getAssunto()))                .andExpect(jsonPath("$.dataCadastro").value(pautaResponse.getDataCadastro().toString()));    }    @Test    void deveRetornarExceptionQuandoNaoEncontrarPauta() throws Exception {        when(pautaFacade.buscarPauta(any()))                .thenThrow(new GenericException("Nenhuma pauta encontrada com id: 3", HttpStatus.NOT_FOUND));        this.mockMvc.perform(get("/sessao-associado/v1/pauta/1"))                .andExpect(status().isNotFound());    }}
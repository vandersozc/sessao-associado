package br.com.vcampanholi.queue;import br.com.vcampanholi.domain.pauta.service.PautaService;import br.com.vcampanholi.domain.sessao.enumerations.SituacaoEnum;import br.com.vcampanholi.domain.sessao.repository.entity.SessaoEntity;import br.com.vcampanholi.domain.sessao.service.SessaoService;import br.com.vcampanholi.domain.sessaovoto.repository.entity.SessaoVotoEntity;import br.com.vcampanholi.domain.sessaovoto.service.SessaoVotoService;import br.com.vcampanholi.queue.send.OrderQueueSender;import br.com.vcampanholi.stubs.entity.PautaEntityStub;import br.com.vcampanholi.stubs.entity.SessaoVotoEntityStub;import br.com.vcampanholi.stubs.response.PautaResponseStub;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.time.LocalDateTime;import java.util.List;import static org.junit.jupiter.api.Assertions.assertAll;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class ScheduledQueueTest {    @Mock    private OrderQueueSender orderQueueSender;    @Mock    private SessaoService sessaoService;    @Mock    private SessaoVotoService sessaoVotoService;    @Mock    private PautaService pautaService;    @InjectMocks    private ScheduledQueue scheduledQueue;    private SessaoVotoEntity sessaoVotoEntity;    @BeforeEach    void setUp() {        sessaoVotoEntity = SessaoVotoEntityStub.sessaoVotoEntity();        sessaoVotoEntity.setSessao(sessaoEntityDefault());    }    @Test    void deveEnviarUmaMensagemQuandoPautaEstaAbertaEDataDeEncerramentoForMenorQueAtual() {        sessaoVotoEntity.getSessao().setSituacao(SituacaoEnum.ABERTA);        sessaoVotoEntity.getSessao().setDataHoraEncerramento(LocalDateTime.now().minusMinutes(10));        when(pautaService.buscarPautas()).thenReturn(List.of(PautaEntityStub.entityToReturn()));        when(sessaoVotoService.buscarVotosDaSessaoPorPauta(any())).thenReturn(List.of(sessaoVotoEntity));        when(pautaService.buscarPautaComputada(any())).thenReturn(PautaResponseStub.pautaResponse());        assertAll(() -> scheduledQueue.enviarPautaComputada());    }    @Test    void deveEnviarUmaMensagemQuandoPautaEstaAbertaEDataDeEncerramentoForIgualAtual() {        sessaoVotoEntity.getSessao().setSituacao(SituacaoEnum.ABERTA);        sessaoVotoEntity.getSessao().setDataHoraEncerramento(LocalDateTime.now());        when(pautaService.buscarPautas()).thenReturn(List.of(PautaEntityStub.entityToReturn()));        when(sessaoVotoService.buscarVotosDaSessaoPorPauta(any())).thenReturn(List.of(sessaoVotoEntity));        when(pautaService.buscarPautaComputada(any())).thenReturn(PautaResponseStub.pautaResponse());        assertAll(() -> scheduledQueue.enviarPautaComputada());    }    @Test    void deveEnviarUmaMensagemQuandoPautaEstaAbertaEDataDeEncerramentoForMaiorAtual() {        sessaoVotoEntity.getSessao().setSituacao(SituacaoEnum.ABERTA);        sessaoVotoEntity.getSessao().setDataHoraEncerramento(LocalDateTime.now().plusMinutes(10));        when(pautaService.buscarPautas()).thenReturn(List.of(PautaEntityStub.entityToReturn()));        when(sessaoVotoService.buscarVotosDaSessaoPorPauta(any())).thenReturn(List.of(sessaoVotoEntity));        when(pautaService.buscarPautaComputada(any())).thenReturn(PautaResponseStub.pautaResponse());        assertAll(() -> scheduledQueue.enviarPautaComputada());    }    @Test    void naoDeveEnviarUmaMensagemQuandoPautaEstaEncerrada() {        sessaoVotoEntity.getSessao().setSituacao(SituacaoEnum.ENCERRADA);        sessaoVotoEntity.getSessao().setDataHoraEncerramento(LocalDateTime.now());        when(pautaService.buscarPautas()).thenReturn(List.of(PautaEntityStub.entityToReturn()));        when(sessaoVotoService.buscarVotosDaSessaoPorPauta(any())).thenReturn(List.of(sessaoVotoEntity));        assertAll(() -> scheduledQueue.enviarPautaComputada());    }    private SessaoEntity sessaoEntityDefault() {        SessaoEntity sessaoEntity = new SessaoEntity();        sessaoEntity.setSituacao(SituacaoEnum.ABERTA);        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now());        return sessaoEntity;    }}
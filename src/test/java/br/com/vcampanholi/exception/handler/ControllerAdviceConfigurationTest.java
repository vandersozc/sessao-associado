package br.com.vcampanholi.exception.handler;import br.com.vcampanholi.api.v1.stubs.ErrorInfoStub;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.exception.constants.ErrorsEnum;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.test.context.junit.jupiter.SpringExtension;import org.springframework.validation.BindException;import org.springframework.validation.BindingResult;import org.springframework.validation.FieldError;import org.springframework.validation.ObjectError;import org.springframework.web.HttpRequestMethodNotSupportedException;import org.springframework.web.bind.MethodArgumentNotValidException;import javax.servlet.http.HttpServletRequest;import javax.validation.ConstraintViolation;import javax.validation.ConstraintViolationException;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class ControllerAdviceConfigurationTest {    @Mock    private HttpServletRequest httpServletRequest;    @Mock    private HttpMessageNotReadableException httpMessageNotReadable;    @Mock    private HttpRequestMethodNotSupportedException httpRequestMethodNotSupported;    @Mock    private Exception exception;    @InjectMocks    private ControllerAdviceConfiguration controllerAdvice;    @Test    void deveRetornarUmaExceptionDoTipoGenericException() {        var genericException = new GenericException("Message error", HttpStatus.BAD_REQUEST);        var error = controllerAdvice.genericException(genericException, httpServletRequest);        var errorInfo = ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ErrorInfoStub.errorInfo("Message error", ErrorsEnum.BAD_REQUEST));        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoHttpMessageNotReadableException() {        var error = controllerAdvice.httpMessageNotReadableException(                httpMessageNotReadable, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("O corpo da requisição não pôde ser lido",                ErrorsEnum.HTTP_MESSAGE_NOT_READABLE);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoHttpRequestMethodNotSupportedException() {        var error = controllerAdvice.httpRequestMethodNotSupportedException(                httpRequestMethodNotSupported, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Método http não é suportado para a requisição",                ErrorsEnum.METHOD_ARGUMENT_NOT_VALID);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoExceptionHandler() {        var error = controllerAdvice.exceptionHandler(exception, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Ocorreu um erro inesperado na aplicação",                ErrorsEnum.INTERNAL_SERVER_ERROR);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoConstraintViolationException() {        Set<ConstraintViolation<?>> violations = new HashSet<>();        var violation = mock(ConstraintViolation.class);        when(violation.getMessage()).thenReturn("O campo id deve ser informado");        violations.add(violation);        ConstraintViolationException exception = mock(ConstraintViolationException.class);        when(exception.getConstraintViolations()).thenReturn(violations);        var error = controllerAdvice.constraintViolationException(exception, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("O campo id deve ser informado", ErrorsEnum.METHOD_ARGUMENT_NOT_VALID);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoBindException() {        List<ObjectError> violations = new ArrayList<>();        var violation = mock(ObjectError.class);        when(violation.getDefaultMessage()).thenReturn("Registro informado");        violations.add(violation);        BindException exception = mock(BindException.class);        when(exception.getAllErrors()).thenReturn(violations);        var error = controllerAdvice.bindException(exception, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Registro informado", ErrorsEnum.METHOD_ARGUMENT_NOT_VALID);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoMethodArgumentNotValidException() {        List<FieldError> fieldErrors = new ArrayList<>();        var violation = mock(FieldError.class);        when(violation.getDefaultMessage()).thenReturn("Valor inválido");        fieldErrors.add(violation);        BindingResult bindResult = mock(BindingResult.class);        when(bindResult.getFieldErrors()).thenReturn(fieldErrors);        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);        when(exception.getBindingResult()).thenReturn(bindResult);        var error = controllerAdvice.methodArgumentNotValidException(exception, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Valor inválido", ErrorsEnum.METHOD_ARGUMENT_NOT_VALID);        assertNotNull(error);        assertEquals(error, errorInfo);    }    @Test    void validaSeExceptionNaoPossuiCamposComErros() {        BindingResult bindResult = mock(BindingResult.class);        when(bindResult.getFieldErrors()).thenReturn(new ArrayList<>());        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);        when(exception.getBindingResult()).thenReturn(bindResult);        var error = controllerAdvice.methodArgumentNotValidException(exception, httpServletRequest);        assertNotNull(error);        assertEquals(error, ErrorInfoStub.errorInfoEmpty());    }}
package br.com.vcampanholi.exception.handler;import br.com.vcampanholi.api.v1.stubs.ErrorInfoStub;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.exception.constants.CommonErrorsEnum;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.test.context.junit.jupiter.SpringExtension;import org.springframework.web.HttpRequestMethodNotSupportedException;import javax.servlet.http.HttpServletRequest;import static org.junit.jupiter.api.Assertions.assertEquals;@ExtendWith(SpringExtension.class)class ControllerAdviceConfigurationTest {    @Mock    private HttpServletRequest httpServletRequest;    @Mock    private HttpMessageNotReadableException httpMessageNotReadableException;    @Mock    private HttpRequestMethodNotSupportedException httpRequestMethodNotSupportedException;    @Mock    private Exception exception;    @InjectMocks    private ControllerAdviceConfiguration controllerAdviceConfiguration;    @Test    void deveRetornarUmaExceptionDoTipoGenericException() {        var genericException = new GenericException("Message error", HttpStatus.BAD_REQUEST);        var erro = controllerAdviceConfiguration.genericException(genericException, httpServletRequest);        var responseEntity = ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ErrorInfoStub.errorInfo("Message error", CommonErrorsEnum.BAD_REQUEST));        assertEquals(erro, responseEntity);    }    @Test    void deveRetornarUmaExceptionDoTipoHttpMessageNotReadableException() {        var erroAdvice = controllerAdviceConfiguration.httpMessageNotReadableException(                httpMessageNotReadableException, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("O corpo da requisição não pôde ser lido",                CommonErrorsEnum.HTTP_MESSAGE_NOT_READABLE);        assertEquals(erroAdvice, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoHttpRequestMethodNotSupportedException() {        var erroAdvice = controllerAdviceConfiguration.httpRequestMethodNotSupportedException(                httpRequestMethodNotSupportedException, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Método http não é suportado para a requisição",                CommonErrorsEnum.METHOD_ARGUMENT_NOT_VALID);        assertEquals(erroAdvice, errorInfo);    }    @Test    void deveRetornarUmaExceptionDoTipoExceptionHandler() {        var erroAdvice = controllerAdviceConfiguration.exceptionHandler(exception, httpServletRequest);        var errorInfo = ErrorInfoStub.errorInfo("Ocorreu um erro inesperado na aplicação",                CommonErrorsEnum.INTERNAL_SERVER_ERROR);        assertEquals(erroAdvice, errorInfo);    }}
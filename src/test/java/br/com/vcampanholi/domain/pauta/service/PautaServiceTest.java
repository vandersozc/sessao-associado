package br.com.vcampanholi.domain.pauta.service;import br.com.vcampanholi.domain.pauta.repository.PautaRepository;import br.com.vcampanholi.domain.sessaovoto.repository.SessaoVotoRepository;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.stubs.entity.SessaoVotoEntityStub;import org.assertj.core.util.Lists;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.HttpStatus;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.util.ArrayList;import java.util.List;import java.util.Optional;import static br.com.vcampanholi.stubs.entity.PautaEntityStub.entityToReturn;import static br.com.vcampanholi.stubs.request.PautaRequestStub.pautaRequest;import static br.com.vcampanholi.stubs.response.PautaResponseStub.pautaResponse;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class PautaServiceTest {    @Mock    private PautaRepository pautaRepository;    @Mock    private SessaoVotoRepository sessaoVotoRepository;    @InjectMocks    private PautaService pautaService;    @Test    void deveRetornarUmaPautaGravada() {        when(pautaRepository.save(any())).thenReturn(entityToReturn());        var response = pautaService.criarPauta(pautaRequest());        assertNotNull(response);        assertEquals(response.getId(), pautaResponse().getId());        assertEquals(response.getAssunto(), pautaResponse().getAssunto());        assertEquals(response.getDataCadastro(), pautaResponse().getDataCadastro());        assertEquals(response.getTotalVotosContra(), pautaResponse().getTotalVotosContra());        assertEquals(response.getTotalVotosFavor(), pautaResponse().getTotalVotosFavor());    }    @Test    void deveRetornarUmaPautaAoBuscar() {        when(pautaRepository.findById(any())).thenReturn(Optional.of(entityToReturn()));        var entity = pautaService.buscarPauta(1L);        assertEquals(entity, entityToReturn());    }    @Test    public void deveRetornarUmaExceptionQuandoNaoEncontrarPauta() {        when(pautaRepository.findById(any())).thenReturn(Optional.empty());        var thrown = assertThrows(GenericException.class, () ->                pautaService.buscarPauta(2L)        );        assertEquals("Nenhuma pauta encontrada com id: 2", thrown.getMessage());        assertEquals(HttpStatus.NOT_FOUND, thrown.getStatus());    }    @Test    void deveRetornarUmaPautaComputadaAoBuscar() {        when(pautaRepository.findById(any())).thenReturn(Optional.of(entityToReturn()));        when(sessaoVotoRepository.findBySessaoPautaId(any()))                .thenReturn(List.of(SessaoVotoEntityStub.sessaoVotoEntity()));        var response = pautaService.buscarPautaComputada(1L);        assertEquals(1L, response.getId().longValue());        assertEquals(0L, response.getTotalVotosContra().longValue());        assertEquals(1L, response.getTotalVotosFavor().longValue());    }    @Test    void deveRetornarUmaPautaSemVotosComputadosQuandoNaoHouveVotacao() {        when(pautaRepository.findById(any())).thenReturn(Optional.of(entityToReturn()));        when(sessaoVotoRepository.findBySessaoPautaId(any())).thenReturn(Lists.emptyList());        var response = pautaService.buscarPautaComputada(1L);        assertEquals(0L, response.getTotalVotosContra().longValue());        assertEquals(0L, response.getTotalVotosFavor().longValue());    }    @Test    public void deveRetornarUmaExceptionQuandoNaoEncontrarPautaUmaComputada() {        when(pautaRepository.findById(any())).thenReturn(Optional.empty());        var thrown = assertThrows(GenericException.class, () ->                pautaService.buscarPautaComputada(2L)        );        assertEquals("Nenhuma pauta encontrada com id: 2", thrown.getMessage());        assertEquals(HttpStatus.NOT_FOUND, thrown.getStatus());    }    @Test    public void deveRetornarUmaListaDePautas() {        when(pautaRepository.findAll()).thenReturn(List.of(entityToReturn()));        var response = pautaService.buscarPautas();        assertEquals(response, List.of(entityToReturn()));    }    @Test    public void deveRetornarUmaListaVaziaQuandoNaoEncontrarDados() {        when(pautaRepository.findAll()).thenReturn(new ArrayList<>());        var response = pautaService.buscarPautas();        assertEquals(response, new ArrayList<>());    }}
package br.com.vcampanholi.domain.sessao.service;import br.com.vcampanholi.domain.pauta.service.PautaService;import br.com.vcampanholi.domain.sessao.repository.SessaoRepository;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.stubs.PautaEntityStub;import br.com.vcampanholi.stubs.SessaoEntityStub;import br.com.vcampanholi.stubs.SessaoRequestStub;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.HttpStatus;import org.springframework.test.context.junit.jupiter.SpringExtension;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class SessaoServiceTest {    @Mock    private SessaoRepository sessaoRepository;    @Mock    private PautaService pautaService;    @InjectMocks    private SessaoService sessaoService;    @Test    void deveRetornarUmaSessaoGravada() {        when(pautaService.buscarPauta(any())).thenReturn(PautaEntityStub.entityToReturn());        when(sessaoRepository.save(any())).thenReturn(SessaoEntityStub.entityToReturn());        var request = sessaoService.criarSessao(1L, SessaoRequestStub.sessaoRequest());        assertEquals(request, SessaoEntityStub.entityToReturn());    }    @Test    public void deveRetornarUmaExceptionQuandoNaoEncontrarPautaAoGravarSessao() {        when(pautaService.buscarPauta(any()))                .thenThrow(new GenericException("Nenhuma pauta encontrada com id: 3", HttpStatus.NOT_FOUND));        when(sessaoRepository.save(any())).thenReturn(SessaoEntityStub.entityToReturn());        var thrown = assertThrows(GenericException.class, () ->                sessaoService.criarSessao(3L, SessaoRequestStub.sessaoRequest())        );        assertEquals("Nenhuma pauta encontrada com id: 3", thrown.getMessage());        assertEquals(HttpStatus.NOT_FOUND, thrown.getStatus());    }}
package br.com.vcampanholi.domain.sessaovoto.service;import br.com.vcampanholi.domain.sessao.repository.entity.SessaoEntity;import br.com.vcampanholi.domain.sessao.service.SessaoService;import br.com.vcampanholi.domain.sessaovoto.repository.SessaoVotoRepository;import br.com.vcampanholi.exception.GenericException;import br.com.vcampanholi.stubs.entity.SessaoEntityStub;import br.com.vcampanholi.stubs.request.SessaoVotoRequestStub;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.HttpStatus;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.time.LocalDateTime;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class SessaoVotoServiceTest {    @Mock    private SessaoService sessaoService;    @Mock    private SessaoVotoRepository sessaoVotoRepository;    @InjectMocks    private SessaoVotoService sessaoVotoService;    private SessaoEntity sessaoEntity;    @BeforeEach    void setUp() {        sessaoEntity = SessaoEntityStub.entityToReturn();    }    @Test    void deveRegistarVotoDeUmAssociado() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().minusMinutes(10));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().plusMinutes(20));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.FALSE);        assertAll(() -> sessaoVotoService.votar(1L, 1L, SessaoVotoRequestStub.sessaoVotoRequest()));    }    @Test    void deveRetornarExceptionQuandoSessaoEstiverEncerradaComDataMenor() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().minusMinutes(10));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().minusMinutes(5));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.FALSE);        var thrown = assertThrows(GenericException.class, () ->                sessaoVotoService.votar(1L, 1L, SessaoVotoRequestStub.sessaoVotoRequest()));        assertEquals("Período de votação não está aberto para esta sessão", thrown.getMessage());        assertEquals(HttpStatus.BAD_REQUEST, thrown.getStatus());    }    @Test    void deveRetornarExceptionQuandoSessaoEstiverEncerradaComDataMaior() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().plusMinutes(20));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().plusMinutes(10));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.FALSE);        var thrown = assertThrows(GenericException.class, () ->                sessaoVotoService.votar(1L, 1L, SessaoVotoRequestStub.sessaoVotoRequest()));        assertEquals("Período de votação não está aberto para esta sessão", thrown.getMessage());        assertEquals(HttpStatus.BAD_REQUEST, thrown.getStatus());    }    @Test    void deveRetornarExceptionQuandoSessaoNaoPertenceAPauta() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().minusMinutes(10));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().plusMinutes(20));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.FALSE);        var thrown = assertThrows(GenericException.class, () ->                sessaoVotoService.votar(3L, 1L, SessaoVotoRequestStub.sessaoVotoRequest()));        assertEquals("Sessão não pertence à pauta informada", thrown.getMessage());        assertEquals(HttpStatus.BAD_REQUEST, thrown.getStatus());    }    @Test    void deveRetornarExceptionQuandoCpfDoAssociadoForInvalido() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().minusMinutes(10));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().plusMinutes(20));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.FALSE);        var request = SessaoVotoRequestStub.sessaoVotoRequest();        request.setCpfAssociado("07466529800");        var thrown = assertThrows(GenericException.class, () ->                sessaoVotoService.votar(3L, 1L, request));        assertEquals("CPF do asociado não é válido", thrown.getMessage());        assertEquals(HttpStatus.BAD_REQUEST, thrown.getStatus());    }    @Test    void deveRetornarExceptionQuandoAssociadoJaVotouNaSessao() {        sessaoEntity.setDataHoraAbertura(LocalDateTime.now().minusMinutes(10));        sessaoEntity.setDataHoraEncerramento(LocalDateTime.now().plusMinutes(20));        when(sessaoService.buscarSessao(any())).thenReturn(sessaoEntity);        when(sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(any(), any())).thenReturn(Boolean.TRUE);        var thrown = assertThrows(GenericException.class, () ->                sessaoVotoService.votar(1L, 1L, SessaoVotoRequestStub.sessaoVotoRequest()));        assertEquals("Associado com CPF: 18979793049 já computou seu voto nesta sessão", thrown.getMessage());        assertEquals(HttpStatus.BAD_REQUEST, thrown.getStatus());    }}
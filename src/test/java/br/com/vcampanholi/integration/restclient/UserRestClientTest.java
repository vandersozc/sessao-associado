package br.com.vcampanholi.integration.restclient;import br.com.vcampanholi.integration.model.UserResponse;import br.com.vcampanholi.integration.model.UserStatusEnum;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.springframework.http.ResponseEntity;import org.springframework.test.context.junit.jupiter.SpringExtension;import org.springframework.web.client.RestTemplate;import java.util.Optional;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.ArgumentMatchers.any;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.Mockito.when;@ExtendWith(SpringExtension.class)class UserRestClientTest {    @Mock    private RestTemplate restTemplate;    @InjectMocks    private UserRestClient userRestClient;    private UserResponse userResponse;    @BeforeEach    void setUp() {        userResponse = UserResponse.builder().status(UserStatusEnum.ABLE_TO_VOTE).build();    }    @Test    void deveRetornarUmUsuarioHabilitadoParaVotar() {        when(restTemplate.getForEntity(anyString(), any(Class.class)))                .thenReturn(ResponseEntity.of(Optional.of(userResponse)));        var response = userRestClient.buscarUsuario("04755292948");        assertEquals(UserStatusEnum.ABLE_TO_VOTE, response.getStatus());    }    @Test    void deveRetornarUmUsuarioNaoHabilitadoParaVotar() {        userResponse.setStatus(UserStatusEnum.UNABLE_TO_VOTE);        when(restTemplate.getForEntity(anyString(), any(Class.class)))                .thenReturn(ResponseEntity.of(Optional.of(userResponse)));        var response = userRestClient.buscarUsuario("13595854004");        assertEquals(UserStatusEnum.UNABLE_TO_VOTE, response.getStatus());    }    @Test    void deveRetornarUmUsuarioInvalido() {        userResponse.setStatus(UserStatusEnum.INVALID);        when(restTemplate.getForEntity(anyString(), any(Class.class)))                .thenReturn(ResponseEntity.of(Optional.of(userResponse)));        var response = userRestClient.buscarUsuario("13595854");        assertEquals(UserStatusEnum.INVALID, response.getStatus());    }}
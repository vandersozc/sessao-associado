package br.com.vcampanholi.queue;import br.com.vcampanholi.api.config.ObjectMapperConfig;import br.com.vcampanholi.domain.pauta.service.PautaService;import br.com.vcampanholi.domain.sessao.enumerations.SituacaoEnum;import br.com.vcampanholi.domain.sessao.repository.entity.SessaoEntity;import br.com.vcampanholi.domain.sessao.service.SessaoService;import br.com.vcampanholi.domain.sessaovoto.service.SessaoVotoService;import br.com.vcampanholi.queue.send.OrderQueueSender;import lombok.AllArgsConstructor;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import java.time.LocalDateTime;@Component@AllArgsConstructorpublic class ScheduledQueue {    private OrderQueueSender orderQueueSender;    private SessaoService sessaoService;    private SessaoVotoService sessaoVotoService;    private PautaService pautaService;    @Scheduled(cron = "${queue.pauta.next.time}")    public void enviarPautaComputada() {        pautaService.buscarIdPautas().forEach(pautaId -> {            var votos = sessaoVotoService.buscarVotosDaSessaoPorPauta(pautaId);            votos.forEach(voto -> {                var sessao = voto.getSessao();                if (permiteEncerrar(sessao)) {                    atualizarSessao(sessao);                    var pautaComputada = pautaService.buscarPautaComputada(pautaId);                    orderQueueSender.send(ObjectMapperConfig.convertToString(pautaComputada));                }            });        });    }    private void atualizarSessao(SessaoEntity sessao) {        sessao.setSituacao(SituacaoEnum.ENCERRADA);        sessaoService.gravar(sessao);    }    private boolean permiteEncerrar(SessaoEntity sessao) {        return SituacaoEnum.ABERTA == sessao.getSituacao()                && (sessao.getDataHoraEncerramento().isBefore(LocalDateTime.now())                || sessao.getDataHoraEncerramento().equals(LocalDateTime.now()));    }}
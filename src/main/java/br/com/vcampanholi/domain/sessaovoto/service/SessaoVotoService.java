package br.com.vcampanholi.domain.sessaovoto.service;import br.com.vcampanholi.api.v1.sessaovoto.model.request.SessaoVotoRequest;import br.com.vcampanholi.domain.sessao.repository.entity.SessaoEntity;import br.com.vcampanholi.domain.sessao.service.SessaoService;import br.com.vcampanholi.domain.sessaovoto.validator.CpfValidator;import br.com.vcampanholi.domain.sessaovoto.mapper.SessaoVotoMapper;import br.com.vcampanholi.domain.sessaovoto.repository.SessaoVotoRepository;import br.com.vcampanholi.exception.GenericException;import lombok.AllArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import java.time.LocalDateTime;@Service@AllArgsConstructorpublic class SessaoVotoService {    private SessaoService sessaoService;    private SessaoVotoRepository sessaoVotoRepository;    public void votar(Long pautaId, Long sessaoId, SessaoVotoRequest sessaoVotoRequest) {        validaCpfAssociado(sessaoVotoRequest.getCpfAssociado());        var sessao = sessaoService.buscarSessao(sessaoId);        validarSessaoDeVotacao(pautaId, sessao);        validarAssociado(sessaoId, sessaoVotoRequest.getCpfAssociado());        var sessaoVoto = SessaoVotoMapper.mapToEntity(sessaoVotoRequest);        sessaoVoto.setSessao(sessao);        sessaoVotoRepository.save(sessaoVoto);    }    private void validaCpfAssociado(String cpfAssociado) {        if (!CpfValidator.cpfValido(cpfAssociado)) {            throw new GenericException("CPF do asociado não é válido", HttpStatus.BAD_REQUEST);        }    }    private void validarSessaoDeVotacao(Long pautaId, SessaoEntity sessao) {        if (!pautaId.equals(sessao.getPauta().getId())) {            throw new GenericException("Sessão não pertence à pauta informada", HttpStatus.BAD_REQUEST);        }        if (LocalDateTime.now().isAfter(sessao.getDataHoraEncerramento()) ||                LocalDateTime.now().isBefore(sessao.getDataHoraAbertura())) {            throw new GenericException("Período de votação não está aberto para esta sessão",                    HttpStatus.BAD_REQUEST);        }    }    private void validarAssociado(Long sessaoId, String cpfAssociado) {        boolean possuiVoto = sessaoVotoRepository.existsBySessaoIdAndCpfAssociado(sessaoId, cpfAssociado);        if (possuiVoto) {            throw new GenericException("Associado com CPF: "                    .concat(cpfAssociado)                    .concat(" já computou seu voto nesta sessão"), HttpStatus.BAD_REQUEST);        }    }}